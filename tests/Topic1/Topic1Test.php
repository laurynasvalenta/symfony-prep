<?php

declare(strict_types=1);

namespace App\Tests\Topic1;

use App\Service\Http\ExampleService;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\Attributes\Test;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\BrowserKit\Cookie;
use Symfony\Component\Console\Tester\CommandTester;
use Symfony\Component\HttpClient\MockHttpClient;
use Symfony\Component\HttpClient\Response\MockResponse;

/*
 * This is a demonstration test for Symfony Certification Topic 1 (HTTP).
 *
 * Please DO NOT edit this file.
 *
 * The implementations are supposed to be done by editing the following files:
 *  - src/Controller/Http/HttpTopicController.php
 *  - src/Command/Http/HttpClientStandalone.php
 *  - src/Command/Http/HttpClientStream.php
 *  - src/Command/Http/HttpClientCache.php
 *  - src/Command/Http/HttpClientHeaderAuthScoped.php
 *  - src/Command/Http/HttpClientQueryAuthScoped.php
 *  - src/Service/Http/ExampleService.php
 *  - config/packages/framework.yaml
 */
class Topic1Test extends WebTestCase
{
    #[Test]
    public function requestParamIsSuffixed(): void
    {
        $client = static::createClient();

        $param = time();
        $response = $client->request('GET', '/topic1/request-param/' . $param);

        static::assertEquals('suffixed-' . $param, $response->text());
    }

    #[Test]
    public function statusCodeIsUnprocessable(): void
    {
        $client = static::createClient();

        $client->request('POST', '/topic1/response-is-unprocessable');

        static::assertResponseIsUnprocessable();
    }

    #[Test]
    #[DataProvider('provideRequestMethodSafe')]
    public function isRequestMethodSafeDeterminedCorrectly(string $method, string $expectedResponse): void
    {
        $client = static::createClient();

        $response = $client->request($method, '/topic1/request-method-is-safe');

        static::assertEquals($expectedResponse, $response->text());
    }

    #[Test]
    #[DataProvider('provideRequestMethodIdempotent')]
    public function isRequestMethodIdempotentDeterminedCorrectly(string $method, string $expectedResponse): void
    {
        $client = static::createClient();

        $response = $client->request($method, '/topic1/request-method-is-idempotent');

        static::assertEquals($expectedResponse, $response->text());
    }

    #[Test]
    public function cookiesAreSent(): void
    {
        $value = microtime();

        $client = static::createClient();
        $client->getCookieJar()->set(new Cookie('flavor', $value, (string)strtotime('+1 day')));

        $response = $client->request('GET', '/topic1/cookie');

        static::assertResponseIsSuccessful();
        static::assertEquals('suffixed-' . $value, $response->text());
    }

    #[Test]
    public function preferredContentTypeIsExtractedCorrectly(): void
    {
        $client = static::createClient();
        $client->request('GET', '/topic1/preferred-content-type', [], [], [
            'HTTP_ACCEPT' => 'text/html;q=0.9,application/json;q=0.95',
        ]);

        static::assertResponseIsSuccessful();
        static::assertResponseHeaderSame('Content-Type', 'application/json');
    }

    #[Test]
    public function safeContentPreferenceIsApplied(): void
    {
        $client = static::createClient();
        $response = $client->request('GET', '/topic1/preferred-safe', [], [], [
            'HTTP_PREFER' => 'safe',
            'HTTP_X_FORWARDED_PROTO' => 'https'
        ]);

        static::assertResponseIsSuccessful();
        static::assertResponseHeaderSame('Preference-Applied', 'safe');
        static::assertEquals('Only safe content.', $response->text());
    }

    #[Test]
    public function safeContentPreferenceIsNotApplied(): void
    {
        $client = static::createClient();
        $response = $client->request('GET', '/topic1/preferred-safe');

        static::assertResponseIsSuccessful();
        static::assertResponseHeaderNotSame('Preference-Applied', 'safe');
        static::assertEquals('Anything.', $response->text());
    }

    #[Test]
    public function localeIsDetectedCorrectly(): void
    {
        $client = static::createClient();
        $client->request('GET', '/topic1/content-language-detection', [], [], [
            'HTTP_ACCEPT_LANGUAGE' => 'de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7',
        ]);

        static::assertResponseIsSuccessful();
        static::assertResponseHeaderSame('Content-Language', 'de');
    }

    #[Test]
    public function defaultLocaleIsSet(): void
    {
        $client = static::createClient();
        $client->request('GET', '/topic1/content-language-detection', [], [], [
            'HTTP_ACCEPT_LANGUAGE' => '*',
        ]);

        static::assertResponseIsSuccessful();
        static::assertResponseHeaderSame('Content-Language', 'fr');
    }

    #[Test]
    public function localeIsInferredFromUrl(): void
    {
        $client = static::createClient();
        $client->request('GET', '/topic1/es/content-language-detection', [], [], [
            'HTTP_ACCEPT_LANGUAGE' => '*',
        ]);

        static::assertResponseIsSuccessful();
        static::assertResponseHeaderSame('Content-Language', 'es');
    }

    #[Test]
    public function simpleHttpClientRequestIsExecuted(): void
    {
        self::bootKernel();
        $application = new Application(self::$kernel);

        $command = $application->find('app:test:http-client:standalone');
        $commandTester = new CommandTester($command);
        $commandTester->execute([]);

        $commandTester->assertCommandIsSuccessful();

        $output = $commandTester->getDisplay();
        $this->assertStringContainsString('Hello, world', $output);
    }

    #[Test]
    #[DataProvider('scopedClientRequestIsExecutedProvider')]
    public function scopedClientRequestIsExecuted(string $commandName, string $expectedOutput): void
    {
        self::bootKernel();
        $application = new Application(self::$kernel);

        $command = $application->find($commandName);
        $commandTester = new CommandTester($command);
        $commandTester->execute([]);

        $commandTester->assertCommandIsSuccessful();

        $output = $commandTester->getDisplay();
        $this->assertStringContainsString($expectedOutput, $output);
    }

    #[Test]
    public function streamedRequestIsSuccessfullyExecuted(): void
    {
        $expectedContent = 'Part 0 of the content.
Part 1 of the content.
Part 2 of the content.';

        self::bootKernel();
        $application = new Application(self::$kernel);

        $command = $application->find('app:test:http-client:stream');
        $commandTester = new CommandTester($command);
        $commandTester->execute([]);

        $commandTester->assertCommandIsSuccessful();

        $output = $commandTester->getDisplay();
        $this->assertStringContainsString($expectedContent, $output);
        $this->assertGreaterThan(3, substr_count($output, 'Downloading content...'));
    }

    #[Test]
    public function responseIsCachedSuccessfully(): void
    {
        self::bootKernel();

        $application = new Application(self::$kernel);

        $command = $application->find('app:test:http-client:cache');
        $commandTester = new CommandTester($command);
        $commandTester->execute([]);

        $firstOutput = $commandTester->getDisplay();

        $commandTester = new CommandTester($command);
        $commandTester->execute([]);

        $secondOutput = $commandTester->getDisplay();

        $this->assertStringContainsString('Response: ', $firstOutput);
        $this->assertStringContainsString($secondOutput, $firstOutput);
    }

    #[Test]
    public function mockHttpClientCanBeUsedForUnitTesting(): void
    {
        $mockedClient = new MockHttpClient([
            new MockResponse('Response 1'),
            new MockResponse('Response 2')
        ]);

        $service = new ExampleService($mockedClient);

        $result = $service->execute();

        $this->assertEquals("Response 1\nResponse 2", $result);
        $this->assertEquals(2, $mockedClient->getRequestsCount());
    }

    public static function scopedClientRequestIsExecutedProvider(): iterable
    {
        yield ['app:test:http-client:header-auth-scoped', 'Authenticated via header'];
        yield ['app:test:http-client:query-auth-scoped', 'Authenticated via query param'];
    }

    public static function provideRequestMethodSafe(): iterable
    {
        yield ['GET', 'Yes'];
        yield ['POST', 'No'];
        yield ['PUT', 'No'];
    }

    public static function provideRequestMethodIdempotent(): iterable
    {
        yield ['GET', 'Yes'];
        yield ['POST', 'No'];
        yield ['PUT', 'Yes'];
    }
}
