security:
    role_hierarchy:
        ROLE_SUPER_ADMIN:
            - ROLE_REGIONAL_ADMIN

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Model\User:
            id: 'App\Service\PasswordHasher\ExtraSafePasswordHasher'
        Symfony\Component\Security\Core\User\InMemoryUser:
            algorithm: 'plaintext'
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
            memory:
                users:
                    test: { password: 'test', roles: [ 'ROLE_USER' ] }
                    test_user1: { password: 'test', roles: [ 'ROLE_USER', 'ROLE_REGIONAL_ADMIN' ] }
                    test_user2: { password: 'test', roles: [ 'ROLE_USER', 'ROLE_SUPER_ADMIN' ] }
                    test_user3: { password: 'test', roles: [ 'ROLE_USER', 'ROLE_ALLOWED_TO_SWITCH' ] }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        blue:
            pattern: ^/topic9/blue-firewall
            provider: users_in_memory
            switch_user: true
            form_login:
                use_forward: true
                login_path: blue_firewall_login
                check_path: blue_firewall_login

            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800
                always_remember_me: true
        green:
            pattern: ^/topic9/green-firewall
            provider: users_in_memory
            context: blue
        main:
            lazy: true
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/topic9/blue-firewall/restricted/regional-admin, roles: ROLE_REGIONAL_ADMIN }
         - { path: ^/topic9/blue-firewall/restricted, roles: ROLE_SUPER_ADMIN }
         - { path: ^/topic9/blue-firewall/access-controlled, roles: ROLE_USER, allow_if: "request.getMethod() == 'POST'" }

    access_decision_manager:
        strategy: unanimous

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
